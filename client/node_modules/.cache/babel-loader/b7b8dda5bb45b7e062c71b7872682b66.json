{"ast":null,"code":"import { Observable } from '../Observable';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { innerFrom } from './innerFrom';\nexport function onErrorResumeNext() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  var nextSources = argsOrArgArray(sources);\n  return new Observable(function (subscriber) {\n    var sourceIndex = 0;\n\n    var subscribeNext = function () {\n      if (sourceIndex < nextSources.length) {\n        var nextSource = void 0;\n\n        try {\n          nextSource = innerFrom(nextSources[sourceIndex++]);\n        } catch (err) {\n          subscribeNext();\n          return;\n        }\n\n        var innerSubscriber = new OperatorSubscriber(subscriber, undefined, noop, noop);\n        nextSource.subscribe(innerSubscriber);\n        innerSubscriber.add(subscribeNext);\n      } else {\n        subscriber.complete();\n      }\n    };\n\n    subscribeNext();\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAsEA,OAAM,SAAUC,iBAAV,GAA2B;EAC/B;;OAAA,yCAAyE;IAAzEC;;;EAEA,IAAMC,WAAW,GAA4BN,cAAc,CAACK,OAAD,CAA3D;EAEA,OAAO,IAAIN,UAAJ,CAAe,UAACQ,UAAD,EAAW;IAC/B,IAAIC,WAAW,GAAG,CAAlB;;IACA,IAAMC,aAAa,GAAG;MACpB,IAAID,WAAW,GAAGF,WAAW,CAACI,MAA9B,EAAsC;QACpC,IAAIC,UAAU,SAAd;;QACA,IAAI;UACFA,UAAU,GAAGR,SAAS,CAACG,WAAW,CAACE,WAAW,EAAZ,CAAZ,CAAtB;QACD,CAFD,CAEE,OAAOI,GAAP,EAAY;UACZH,aAAa;UACb;QACD;;QACD,IAAMI,eAAe,GAAG,IAAIZ,kBAAJ,CAAuBM,UAAvB,EAAmCO,SAAnC,EAA8CZ,IAA9C,EAAoDA,IAApD,CAAxB;QACAS,UAAU,CAACI,SAAX,CAAqBF,eAArB;QACAA,eAAe,CAACG,GAAhB,CAAoBP,aAApB;MACD,CAXD,MAWO;QACLF,UAAU,CAACU,QAAX;MACD;IACF,CAfD;;IAgBAR,aAAa;EACd,CAnBM,CAAP;AAoBD","names":["Observable","argsOrArgArray","OperatorSubscriber","noop","innerFrom","onErrorResumeNext","sources","nextSources","subscriber","sourceIndex","subscribeNext","length","nextSource","err","innerSubscriber","undefined","subscribe","add","complete"],"sources":["C:\\Users\\Stama\\Desktop\\Coding\\Portofolio-React\\client\\node_modules\\rxjs\\src\\internal\\observable\\onErrorResumeNext.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInputTuple } from '../types';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { innerFrom } from './innerFrom';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function onErrorResumeNext<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\n\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits a complete or an error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` will subscribe to each observable source it is provided, in order.\n * If the source it's subscribed to emits an error or completes, it will move to the next source\n * without error.\n *\n * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.\n *\n * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\n * sources emits an error.\n *\n * Note that there is no way to handle any errors thrown by sources via the result of\n * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\n * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\n *\n * ## Example\n *\n * Subscribe to the next Observable after map fails\n *\n * ```ts\n * import { onErrorResumeNext, of, map } from 'rxjs';\n *\n * onErrorResumeNext(\n *   of(1, 2, 3, 0).pipe(\n *     map(x => {\n *       if (x === 0) {\n *         throw Error();\n *       }\n *       return 10 / x;\n *     })\n *   ),\n *   of(1, 2, 3)\n * )\n * .subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err),     // Will never be called.\n *   complete: () => console.log('done')\n * });\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // 'done'\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.\n * @return {Observable} An Observable that concatenates all sources, one after the other,\n * ignoring all errors, such that any error causes it to move on to the next source.\n */\nexport function onErrorResumeNext<A extends readonly unknown[]>(\n  ...sources: [[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]\n): Observable<A[number]> {\n  const nextSources: ObservableInputTuple<A> = argsOrArgArray(sources) as any;\n\n  return new Observable((subscriber) => {\n    let sourceIndex = 0;\n    const subscribeNext = () => {\n      if (sourceIndex < nextSources.length) {\n        let nextSource: Observable<A[number]>;\n        try {\n          nextSource = innerFrom(nextSources[sourceIndex++]);\n        } catch (err) {\n          subscribeNext();\n          return;\n        }\n        const innerSubscriber = new OperatorSubscriber(subscriber, undefined, noop, noop);\n        nextSource.subscribe(innerSubscriber);\n        innerSubscriber.add(subscribeNext);\n      } else {\n        subscriber.complete();\n      }\n    };\n    subscribeNext();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}